@ Program 3: Multi-Key Snake Exploration with Key Testing
@ Robot starts at unknown position facing unknown direction
@ Goal: Find correct KEY + open DOOR OR find EXIT (whichever comes first)
@ Environment: Orthogonal rectangular room, multiple keys (only one works)
@ Strategy: Snake pattern + systematic key testing at door location

LOAD 3

@ Initialize state variables
haskey := FALSE
goingright := TRUE

@ Program: Find the bottom-left corner
TURN_LEFT

@ Move West until we hit the left wall.
WHILE FRONT_IS_CLEAR
    MOVE_FORWARD
END

@ Now we are at the left wall, facing West.
@ Turn left again to face South.
TURN_LEFT

@ Move South until we hit the bottom wall.
WHILE FRONT_IS_CLEAR
    MOVE_FORWARD
END

@ Turn right twice to face North
TURN_RIGHT
TURN_RIGHT

@ Main exploration loop - Snake pattern sweep
WHILE TRUE
    @ Priority 1: Check for immediate escape via exit hatch
    IF AT_EXIT
        OPEN_DOOR
    END
    
    @ Priority 2: Check if at door with key
    IF AT_DOOR AND haskey  
        OPEN_DOOR

        THROW_AWAY_KEY
        haskey := FALSE
    END
    
    @ Priority 3: Pick up key if on it
    IF ON_KEY
        IF AT_DOOR OR haskey
            @we should do nothing
        OTHERWISE
            PICK_KEY
            haskey := TRUE
        END
    END
    
    @ Snake movement pattern
    IF FRONT_IS_CLEAR
        @ Continue in current direction
        MOVE_FORWARD
    OTHERWISE
        @ Hit a wall - time to change direction (snake turn)
        IF goingright
            @ Currently going right, turn to go up
            TURN_LEFT
            IF FRONT_IS_CLEAR
                MOVE_FORWARD
                @ Turn left again to go left (opposite direction)
                TURN_LEFT
                goingright := FALSE
            OTHERWISE
                @ No room to go up, we're at the top - turn around
                TURN_LEFT
                TURN_LEFT
                goingright := FALSE
            END
        OTHERWISE
            @ Currently going left, turn to go up  
            TURN_RIGHT
            IF FRONT_IS_CLEAR
                MOVE_FORWARD
                @ Turn right again to go right (opposite direction)
                TURN_RIGHT
                goingright := TRUE
            OTHERWISE
                @ No room to go up, we're at the top - turn around
                TURN_RIGHT
                TURN_RIGHT
                goingright := TRUE
            END
        END
    END
END

@ The program will end.
END